package vn.iotstar.controller;

import java.io.IOException;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import vn.iotstar.service.impl.UserService;
import vn.iotstar.utils.Constant;

@SuppressWarnings("serial")
@WebServlet(urlPatterns = "/register")
public class RegisterController extends HttpServlet{
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
	throws ServletException, IOException {
		HttpSession session = req.getSession(false);
        if (session != null && session.getAttribute("username") != null) {
            resp.sendRedirect(req.getContextPath() + "/waiting");
            return;
        }

        // Check cookie
        Cookie[] cookies = req.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals(Constant.COOKIE_REMEMBER)) {
                    session = req.getSession(true);
                    session.setAttribute("username", cookie.getValue()); 
                    resp.sendRedirect(req.getContextPath() + "/waiting");
                    return;
                }
            }
        }
        req.getRequestDispatcher(Constant.REGISTER).forward(req, resp);
}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String username = req.getParameter("username");
		String email = req.getParameter("email");
		String fullname = req.getParameter("fullname");
		String phone = req.getParameter("phone");
		String password = req.getParameter("password");
		String confirm = req.getParameter("confirmPassword");

		resp.setCharacterEncoding("UTF-8");
		req.setCharacterEncoding("UTF-8");
		if (!password.equals(confirm)) {
		    String alertMsg = "Mật khẩu xác nhận không khớp!";
		    req.setAttribute("alert", alertMsg);
		    req.getRequestDispatcher("/views/register.jsp").forward(req, resp);
		    return;
		}
		UserService service = new UserService();
		String alertMsg = "";
		if (service.checkExistEmail(email)) {
		    alertMsg = "Email đã tồn tại!";
		    req.setAttribute("alert", alertMsg);
		    req.getRequestDispatcher("/views/register.jsp").forward(req, resp);
		    return;
		}
		if (service.checkExistUsername(username)) {
		    alertMsg = "Tài khoản đã tồn tại!";
		    req.setAttribute("alert", alertMsg);
		    req.getRequestDispatcher("/views/register.jsp").forward(req, resp);
		    return;
		}
		boolean isSuccess = service.register(username, password, email, fullname, phone);
		if (isSuccess) {
		    // Đăng ký thành công -> chuyển hướng sang trang đăng nhập
		    resp.sendRedirect(req.getContextPath() + "/login");
		} else {
		    // Đăng ký thất bại -> ở lại trang đăng ký và thông báo lỗi
		    alertMsg = "Có lỗi xảy ra, đăng ký không thành công!";
		    req.setAttribute("alert", alertMsg);
		    req.getRequestDispatcher("/views/register.jsp").forward(req, resp);
		}

	}
}
