package vn.iotstar.dao.impl;

import vn.iotstar.dao.UserDao;
import vn.iotstar.model.User;
import vn.iotstar.DBConnect;

import java.sql.*;

public class UserDaoImpl implements UserDao {

    private Connection getConn() throws Exception {
        return new DBConnect().getConnection();
    }

    private User map(ResultSet rs) throws SQLException {
        User u = new User();
        u.setId(rs.getInt("id"));
        u.setEmail(rs.getString("email"));
        u.setUserName(rs.getString("username"));  
        u.setFullName(rs.getString("fullname"));
        u.setPassWord(rs.getString("password"));
        u.setAvatar(rs.getString("avatar"));
        u.setRoleid(rs.getInt("roleid"));
        u.setPhone(rs.getString("phone"));

        java.sql.Date d = rs.getDate("createdDate"); 
        u.setCreatedDate(d);                   
        return u;
    }

    @Override
    public User findByUsername(String username) {
        final String sql = "SELECT * FROM [User] WHERE username = ?";
        try (Connection c = getConn();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setString(1, username);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) return map(rs);
            }
        } catch (Exception e) { e.printStackTrace(); }
        return null;
    }

    @Override
    public User findByEmail(String email) {
        final String sql = "SELECT * FROM [User] WHERE email = ?";
        try (Connection c = getConn();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setString(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) return map(rs);
            }
        } catch (Exception e) { e.printStackTrace(); }
        return null;
    }

    @Override
    public boolean existsByUsername(String username) {
        final String sql = "SELECT 1 FROM [User] WHERE username = ?";
        try (Connection c = getConn();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setString(1, username);
            try (ResultSet rs = ps.executeQuery()) {
                return rs.next();
            }
        } catch (Exception e) { e.printStackTrace(); }
        return false;
    }

    @Override
    public boolean existsByEmail(String email) {
        final String sql = "SELECT 1 FROM [User] WHERE email = ?";
        try (Connection c = getConn();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setString(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                return rs.next();
            }
        } catch (Exception e) { e.printStackTrace(); }
        return false;
    }

    @Override
    public User findByUsernameAndPassword(String username, String rawPassword) {
        final String sql = "SELECT * FROM [User] WHERE username = ? AND password = ?";
        try (Connection c = getConn();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.setString(2, rawPassword); // demo: chưa mã hoá
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) return map(rs);
            }
        } catch (Exception e) { e.printStackTrace(); }
        return null;
    }

    @Override
    public void insert(User u) {
        final String sql = "INSERT INTO [User](email,username,fullname,password,phone) VALUES (?,?,?,?,?)";
        try (Connection c = getConn();
             PreparedStatement ps = c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setString(1, u.getEmail());
            ps.setString(2, u.getUserName());
            ps.setString(3, u.getFullName());
            ps.setString(4, u.getPassWord());
            ps.setString(5, u.getPhone());
            ps.executeUpdate();
            try (ResultSet keys = ps.getGeneratedKeys()) {
                if (keys.next()) u.setId(keys.getInt(1));
            }
        } catch (Exception e) { e.printStackTrace(); }
    }
}
