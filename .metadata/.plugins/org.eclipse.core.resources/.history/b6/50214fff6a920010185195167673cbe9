package vn.iotstar.dao.impl;

import vn.iotstar.dao.UserDao;
import vn.iotstar.model.User;
import vn.iotstar.utils.JdbcUtil;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.*;
import java.time.LocalDateTime;

public class UserDaoImpl implements UserDao {

	private User map(ResultSet rs) throws SQLException {
		User u = new User();
		u.setId(rs.getInt("id"));
		u.setEmail(rs.getString("email"));
		u.setUsername(rs.getString("username"));
		u.setFullname(rs.getString("fullname"));
		u.setPassword(rs.getString("password"));
		u.setAvatar(rs.getString("avatar"));
		u.setRoleid(rs.getInt("roleid"));
		u.setPhone(rs.getString("phone"));

		Date d = rs.getDate("createdDate"); // KHÔNG phải "created_at"
		u.setCreatedDate(d != null ? d.toLocalDate() : null);

		return u;
	}

	@Override
	public User findByUsername(String username) {
		String sql = "SELECT * FROM users WHERE username = ?";
		try (Connection c = JdbcUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
			ps.setString(1, username);
			try (ResultSet rs = ps.executeQuery()) {
				if (rs.next())
					return map(rs);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public User findByEmail(String email) {
		String sql = "SELECT * FROM users WHERE email = ?";
		try (Connection c = JdbcUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
			ps.setString(1, email);
			try (ResultSet rs = ps.executeQuery()) {
				if (rs.next())
					return map(rs);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public boolean existsByUsername(String username) {
		String sql = "SELECT 1 FROM users WHERE username = ?";
		try (Connection c = JdbcUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
			ps.setString(1, username);
			try (ResultSet rs = ps.executeQuery()) {
				return rs.next();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public boolean existsByEmail(String email) {
		String sql = "SELECT 1 FROM users WHERE email = ?";
		try (Connection c = JdbcUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
			ps.setString(1, email);
			try (ResultSet rs = ps.executeQuery()) {
				return rs.next();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public User findByUsernameAndPassword(String username, String rawPassword) {
		String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
		try (Connection c = JdbcUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
			ps.setString(1, username);
			ps.setString(2, rawPassword); // demo: chưa mã hoá
			try (ResultSet rs = ps.executeQuery()) {
				if (rs.next())
					return map(rs);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void insert(User u) {
		String sql = "INSERT INTO users(email,username,fullname,password,phone) VALUES (?,?,?,?,?)";
		try (Connection c = JdbcUtil.getConnection();
				PreparedStatement ps = c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
			ps.setString(1, u.getEmail());
			ps.setString(2, u.getUsername());
			ps.setString(3, u.getFullname());
			ps.setString(4, u.getPassword());
			ps.setString(5, u.getPhone());
			ps.executeUpdate();
			try (ResultSet keys = ps.getGeneratedKeys()) {
				if (keys.next())
					u.setId(keys.getInt(1));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
